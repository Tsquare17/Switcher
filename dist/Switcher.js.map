{"version":3,"file":"Switcher.js","sources":["../src/Switcher.js"],"sourcesContent":["export default class Switcher {\n    #className = 'Switcher';\n    #headElements = [];\n    #bodyScripts = [];\n    #updateNodes = [];\n\n    constructor({containerSelector = 'body', linkSelector = 'a', debugging = false} = {}) {\n        this.containerSelector = containerSelector;\n        this.linkSelector = linkSelector;\n        this.debugging = debugging;\n    }\n\n    init() {\n        const headElements = document.querySelectorAll('head *');\n        for (const el of headElements) {\n            this.#headElements.push(el);\n        }\n\n        const scripts = document.querySelectorAll(this.containerSelector + ' script');\n        for (const script of scripts) {\n            this.#bodyScripts.push(script);\n        }\n\n        document.querySelector('body').addEventListener('click', e => {\n            if (e.target.getAttribute('data-switcher') === 'false') {\n                return;\n            }\n\n            if (e.target.host !== window.location.host) {\n                return;\n            }\n\n            if (e.target.matches(this.linkSelector)) {\n                e.preventDefault();\n                this.#replaceEvent(e);\n            }\n        });\n\n        this.#getElement(this.linkSelector);\n    }\n\n    #replaceEvent(event) {\n        let xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                const parser = new DOMParser();\n                const doc = parser.parseFromString(xhr.responseText, 'text/html');\n                const newContent = doc.querySelector(this.containerSelector).innerHTML;\n\n                const beforeSwitch = new CustomEvent('switcher.before', {\n                    detail: {\n                        event: event,\n                        content: newContent\n                    }\n                });\n\n                document.dispatchEvent(beforeSwitch);\n\n                this.#updateHeadElements(doc);\n                this.#updateBodyScripts(doc);\n\n                const root = doc.querySelector(this.containerSelector);\n                this.#updateDom(root);\n\n                Switcher.#updateURL(event.target);\n\n                const afterSwitch = new CustomEvent('switcher.after');\n                document.dispatchEvent(afterSwitch);\n            }\n        };\n\n        xhr.open('GET', event.target, true);\n        xhr.send();\n    }\n\n    static #updateURL(location) {\n        window.history.pushState(null, '', location);\n    }\n\n    #getElement(selector) {\n        let el = document.querySelector(selector);\n\n        if (el === null && this.debugging) {\n            console.log(this.#className + ': No elements matching ' + selector + ' were found');\n        }\n\n        return el;\n    }\n\n    #updateHeadElements(doc) {\n        const headElements = doc.querySelectorAll('head *');\n        for (const el of headElements) {\n            let isPresent = false;\n            for (const existingEl of this.#headElements) {\n                if (el.isEqualNode(existingEl)) {\n                    isPresent = true;\n                }\n            }\n\n            if (!isPresent) {\n                if (el.matches('title')) {\n                    document.querySelector('title').innerHTML = el.innerHTML;\n                    continue;\n                } else if (el.matches('script')) {\n                    this.#addScript(el, 'head');\n                    this.#headElements.push(el);\n                    continue;\n                } else if (el.matches('meta')) {\n                    const matchingMetaName = document.querySelector('meta[name=\"' + el.getAttribute('name') + '\"]');\n                    if (matchingMetaName) {\n                        matchingMetaName.setAttribute('content', el.getAttribute('content'));\n                        continue;\n                    }\n\n                    const matchingMetaProp = document.querySelector('meta[property=\"' + el.getAttribute('property') + '\"]');\n                    if (matchingMetaProp) {\n                        matchingMetaProp.setAttribute('content', el.getAttribute('content'));\n                        continue;\n                    }\n                }\n\n                this.#headElements.push(el);\n                document.querySelector('head').appendChild(el);\n            }\n        }\n    }\n\n    #updateBodyScripts(doc) {\n        for (const script of doc.querySelectorAll(this.containerSelector + ' script')) {\n            let isPresent = false;\n            for (const existingScript of this.#bodyScripts) {\n                if (script.isEqualNode(existingScript)) {\n                    isPresent = true;\n                }\n            }\n\n            if (!isPresent) {\n                this.#addScript(script, this.containerSelector);\n            }\n        }\n    }\n\n    #addScript(script, selector) {\n        const newScript = document.createElement('script');\n\n        this.#copyElementAttributes(script, newScript);\n\n        if (script.innerHTML) {\n            newScript.appendChild(document.createTextNode(script.innerHTML));\n        }\n\n        newScript.async = false;\n\n        document.querySelector(selector).appendChild(newScript);\n    }\n\n    #copyElementAttributes(from, to) {\n        [...from.attributes].forEach(attr => {\n            to.setAttribute(attr.nodeName, attr.nodeValue);\n        });\n    }\n\n    #updateDom(doc) {\n        this.#updateNodes = [];\n        this.#diffNodes(doc, document.querySelector(this.containerSelector));\n\n        for (const node of this.#updateNodes) {\n            if (node.current.tagName === 'BODY') {\n                this.#copyElementAttributes(node.replacement, node.current);\n                continue;\n            }\n\n            if (!node.current.isEqualNode(node.replacement)) {\n                let element = node.replacement.cloneNode(true);\n                node.current.parentNode.replaceChild(element, node.current);\n            }\n        }\n    }\n\n    #diffNodes(nodeA, nodeB) {\n        for (let i = 0; i < nodeA.children.length; i++) {\n            if (nodeA.children[i].isEqualNode(nodeB.children[i])) {\n                continue;\n            }\n\n            if (nodeB.children[i]) {\n                this.#diffNodes(nodeA.children[i], nodeB.children[i]);\n            } else {\n                return this.#updateNodes.push({current: nodeB, replacement: nodeA});\n            }\n        }\n\n        if (!nodeA.isEqualNode(nodeB)) {\n            this.#updateNodes.push({current: nodeB, replacement: nodeA});\n        }\n    }\n}\n"],"names":["Switcher","containerSelector","linkSelector","debugging","document","querySelectorAll","el","push","this","script","querySelector","addEventListener","e","target","getAttribute","host","window","location","matches","_this","preventDefault","event","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","doc","DOMParser","parseFromString","responseText","newContent","_this2","innerHTML","beforeSwitch","CustomEvent","detail","content","dispatchEvent","root","afterSwitch","open","send","history","pushState","selector","console","log","_classPrivateFieldGet","isPresent","existingEl","isEqualNode","matchingMetaName","setAttribute","matchingMetaProp","appendChild","existingScript","newScript","createElement","createTextNode","async","from","to","attributes","forEach","attr","nodeName","nodeValue","node","current","tagName","replacement","element","cloneNode","parentNode","replaceChild","nodeA","nodeB","i","children","length"],"mappings":"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"}