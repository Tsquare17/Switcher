{"version":3,"file":"Switcher.js","sources":["../src/Switcher.js"],"sourcesContent":["export default class Switcher {\n    #className = 'XhrSwitcher';\n\n    constructor(containerSelector, linkSelector, debugging = false) {\n        this.containerSelector = containerSelector;\n        this.linkSelector = linkSelector;\n        this.debugging = debugging;\n    }\n\n    init() {\n        this.container = this.#getElement(this.containerSelector);\n\n        document.querySelector('body').addEventListener('click', e => {\n            if (e.target.matches(this.linkSelector)) {\n                e.preventDefault();\n                this.#replaceEvent(e);\n            }\n        });\n\n        this.#getElement(this.linkSelector);\n    }\n\n    #replaceEvent(event) {\n        let xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n                const parser = new DOMParser();\n                const doc = parser.parseFromString(xhr.responseText, 'text/html');\n                const newContent = doc.querySelector(this.containerSelector).innerHTML;\n\n                const beforeSwitch = new CustomEvent('switcher.before', {\n                    detail: {\n                        event: event,\n                        content: newContent\n                    }\n                });\n\n                document.dispatchEvent(beforeSwitch);\n\n                this.container.innerHTML = doc.querySelector(this.containerSelector).innerHTML;\n\n                Switcher.#updateURL(event.target);\n\n                const afterSwitch = new CustomEvent('switcher.after');\n                document.dispatchEvent(afterSwitch);\n            }\n        };\n\n        xhr.open('GET', event.target, true);\n        xhr.send();\n    }\n\n    static #updateURL(location) {\n        window.history.pushState(null, '', location);\n    }\n\n    #getElement(selector) {\n        let el = document.querySelector(selector);\n\n        if (el === null && this.debugging) {\n            console.log(this.#className + ': No elements matching ' + selector + ' were found');\n        }\n\n        return el;\n    }\n}\n"],"names":["Switcher","containerSelector","linkSelector","debugging","container","this","document","querySelector","addEventListener","e","target","matches","_this","preventDefault","event","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","doc","DOMParser","parseFromString","responseText","newContent","_this2","innerHTML","beforeSwitch","CustomEvent","detail","content","dispatchEvent","afterSwitch","open","send","location","window","history","pushState","selector","el","console","log","_classPrivateFieldGet"],"mappings":"m9BAAqBA,wBAGLC,EAAmBC,OAAcC,oHAFhC,qBAGJF,kBAAoBA,OACpBC,aAAeA,OACfC,UAAYA,6CAGrB,2BACSC,YAAYC,eAAAA,KAAiBA,KAAKJ,mBAEvCK,SAASC,cAAc,QAAQC,iBAAiB,SAAS,SAAAC,GACjDA,EAAEC,OAAOC,QAAQC,EAAKV,gBACtBO,EAAEI,mBACFD,YAAAA,EAAmBH,6BAIVJ,KAAKH,8DAGZY,cACNC,EAAM,IAAIC,eACdD,EAAIE,mBAAqB,cACjBF,EAAIG,aAAeF,eAAeG,KAAM,KAElCC,GADS,IAAIC,WACAC,gBAAgBP,EAAIQ,aAAc,aAC/CC,EAAaJ,EAAIb,cAAckB,EAAKxB,mBAAmByB,UAEvDC,EAAe,IAAIC,YAAY,kBAAmB,CACpDC,OAAQ,CACJf,MAAOA,EACPgB,QAASN,KAIjBlB,SAASyB,cAAcJ,GAEvBF,EAAKrB,UAAUsB,UAAYN,EAAIb,cAAckB,EAAKxB,mBAAmByB,YAErE1B,EAzCKA,UAyCLA,EAAoBc,EAAMJ,YAEpBsB,EAAc,IAAIJ,YAAY,kBACpCtB,SAASyB,cAAcC,KAI/BjB,EAAIkB,KAAK,MAAOnB,EAAMJ,QAAQ,GAC9BK,EAAImB,kBAGUC,GACdC,OAAOC,QAAQC,UAAU,KAAM,GAAIH,cAG3BI,OACJC,EAAKlC,SAASC,cAAcgC,UAErB,OAAPC,GAAenC,KAAKF,WACpBsC,QAAQC,IAAIC,UAAkB,0BAA4BJ,EAAW,eAGlEC"}